/*
  Generate-files:
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=.
  --go-grpc_opt=paths=source_relative auctionhouse.proto
*/

syntax = "proto3";
package proto;

option go_package = "./proto";


// ack =  given a bid, returns an outcome among fail, success or exception

// Send a new bid + subscribing
message BidRequest {
  int32 clientId = 1;
  int32 amount = 2;
}

// Highest bidder info - highest bid, and bidder
message ResponseToQuery {
  Status status = 1;
  int32 highestBid = 2;
  string clientId = 3;
}

// Message for prompting asking for highest bidder
message QueryResult {}


// Was bid successful?
message StatusOfBid {
  Status status = 1;
  int32 highestBid = 2;
  repeated string ports = 3;
}

enum Status {
  NOW_HIGHEST_BIDDER = 0;
  TOO_LOW_BID = 1;
  EXCEPTION = 2;
  AUCTION_ENDED = 3;
  AUCTION_ACTIVE = 4;
}

// send data to other server - auctionhouse
message SendDataRequest {
    int64 amount = 1;
    string backupIds = 2;
}


message SendDataResponse {
    int64 amount = 1;
    string backupIds = 2;
}

service AuctionhouseService {
  // result: send stream of qmgs bc client can ask at any point of time
  // what the highest bid in the round is.
  // prints winner when time runs out to all clients.
  rpc Result( QueryResult) returns (ResponseToQuery) {}

  // First call to Bid registers the auctioners
  // Bidders can bid several times, but a bid must be higher than the previous
  // one(s)
  rpc Bid( BidRequest) returns (StatusOfBid) {
  }
  // Send data to other server
  rpc SendData(stream SendDataRequest) returns (stream SendDataResponse) {
  } // Broadcast -- subcribe - server -> client via msgQueue
}